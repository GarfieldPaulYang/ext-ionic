{"version":3,"sources":["component-registar.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,SAAA,EAAU,MAAO,eAAA,CAAgB;AAG1C;IAAA;QACU,eAAU,GAAQ,EAAE,CAAC;IA2C/B,CAAC;IAzCC,6CAAiB,GAAjB,UAAkB,SAAc;QAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;IAC9C,CAAC;IAED,+CAAmB,GAAnB,UAAoB,SAAc;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC/B,MAAM,CAAC;QACT,CAAC;QACD,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,8CAAkB,GAAlB,UAAmB,UAAsB;QAAzC,iBAKC;QAJC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC;QACT,CAAC;QACD,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS,IAAI,OAAA,KAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAjC,CAAiC,CAAC,CAAC;IACrE,CAAC;IAED,gDAAoB,GAApB,UAAqB,UAAsB;QAA3C,iBAKC;QAJC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC;QACT,CAAC;QACD,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,EAAnC,CAAmC,CAAC,CAAC;IACvE,CAAC;IAED,wCAAY,GAAZ,UAAa,aAAqB;QAChC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC;IAEO,qCAAS,GAAjB,UAAkB,SAAc;QAC9B,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IAOH,wBAAC;AAAD,CA5CA,AA4CC;;AANM,4BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,gCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"component-registar.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { isPresent } from '../utils/util';\n\n\nexport class ComponentRegistar {\n  private components: any = {};\n\n  registerComponent(component: any) {\n    if (!this.isPresent(component)) {\n      return;\n    }\n    this.components[component.name] = component;\n  }\n\n  unregisterComponent(component: any) {\n    if (!this.isPresent(component)) {\n      return;\n    }\n    delete this.components[component.name];\n  }\n\n  registerComponents(components: Array<any>) {\n    if (!isPresent(components)) {\n      return;\n    }\n    components.forEach(component => this.registerComponent(component));\n  }\n\n  unregisterComponents(components: Array<any>) {\n    if (!isPresent(components)) {\n      return;\n    }\n    components.forEach(component => this.unregisterComponent(component));\n  }\n\n  getComponent(componentname: string): any {\n    return this.components[componentname];\n  }\n\n  private isPresent(component: any): boolean {\n    return isPresent(component) && isPresent(component.name);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}