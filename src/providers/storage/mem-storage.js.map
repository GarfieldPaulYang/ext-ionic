{"version":3,"sources":["mem-storage.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAE3C,OAAO,EAAE,SAAA,EAAU,MAAO,kBAAA,CAAmB;AAG7C;IAAA;QACU,iBAAY,GAAQ,EAAE,CAAC;IAgCjC,CAAC;IA9BC,4BAAI,GAAJ,UAAK,OAAoB;QACvB,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,wBAAwB,CAAC,CAAC;QAClD,CAAC;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,OAAO,CAAC;QACpF,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,4BAAI,GAAJ,UAAQ,OAAoB;QAC1B,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAChF,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC3C,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IAED,8BAAM,GAAN,UAAO,OAAsB;QAC3B,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QACzE,MAAM,CAAC,OAAO,CAAC,OAAO,CAAM,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACjD,CAAC;IAEO,8BAAM,GAAd,UAAe,QAAgB,EAAE,OAAe;QAC9C,MAAM,CAAC,CAAC,OAAO,GAAG,OAAO,GAAG,EAAE,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC;IACnD,CAAC;IAOH,oBAAC;AAAD,CAjCA,AAiCC;;AANM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"mem-storage.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Storage, SaveOptions, LoadOptions, RemoveOptions } from './storage';\nimport { isPresent } from '../../utils/util';\n\n\nexport class MemoryStorage implements Storage {\n  private localStorage: any = {};\n\n  save(options: SaveOptions): Promise<any> {\n    if (!isPresent(options.content)) {\n      return Promise.reject('content is not present');\n    }\n    this.localStorage[this.getKey(options.filename, options.dirname)] = options.content;\n    return Promise.resolve();\n  }\n\n  load<T>(options: LoadOptions): Promise<T> {\n    let content = this.localStorage[this.getKey(options.filename, options.dirname)];\n    if (!content) {\n      return Promise.reject('file not found.');\n    }\n    return Promise.resolve(content);\n  }\n\n  remove(options: RemoveOptions): Promise<any> {\n    delete this.localStorage[this.getKey(options.filename, options.dirname)];\n    return Promise.resolve<any>({ success: true });\n  }\n\n  private getKey(filename: string, dirname: string): string {\n    return (dirname ? dirname : '') + '_' + filename;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}