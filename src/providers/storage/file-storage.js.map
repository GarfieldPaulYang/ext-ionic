{"version":3,"sources":["file-storage.ts"],"names":[],"mappings":"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","file":"file-storage.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Platform } from 'ionic-angular';\nimport { File, Metadata, Entry } from '@ionic-native/file';\nimport { isPresent } from '../../utils/util';\nimport { Storage, SaveOptions, LoadOptions, RemoveOptions } from './storage';\nimport { MemoryStorage } from './mem-storage';\n\n\nexport class TextFileStorage implements Storage {\n  constructor(protected platform: Platform, protected file: File, protected memoryStorage: MemoryStorage) { }\n\n  save(options: SaveOptions): Promise<any> {\n    if (!isPresent(options.content)) {\n      return Promise.reject('content is not present');\n    }\n    if (this.platform.is('cordova')) {\n      return this.writeToFile(options);\n    }\n    return this.memoryStorage.save(options);\n  }\n\n  load<T>(options: LoadOptions): Promise<T> {\n    if (this.platform.is('cordova')) {\n      if (!options.maxAge) {\n        return this.readFile<T>(options);\n      }\n\n      return this.file.resolveLocalFilesystemUrl(\n        this.getFilepath(options.dirname) + '/' + options.filename\n      ).then(fileEntry => {\n        return this.getMetadata(fileEntry);\n      }).then((metadata) => {\n        if (metadata && (Date.now() - metadata.modificationTime.getTime()) > options.maxAge) {\n          return this.removeFile(options).catch(() => { });\n        }\n      }).then(() => {\n        return this.readFile<T>(options);\n      }).catch(error => {\n        return Promise.reject(error);\n      });\n    }\n\n    return this.memoryStorage.load<T>(options);\n  }\n\n  remove(options: RemoveOptions): Promise<any> {\n    if (this.platform.is('cordova')) {\n      return this.removeFile(options);\n    }\n    return this.memoryStorage.remove(options);\n  }\n\n  protected serialize(content: any): string {\n    return content;\n  }\n\n  protected deserialize(content: string): any {\n    return content;\n  }\n\n  private writeToFile(options: SaveOptions): Promise<any> {\n    const write = (options: SaveOptions): Promise<any> => {\n      return this.file.writeFile(\n        this.getFilepath(options.dirname),\n        options.filename,\n        this.serialize(options.content),\n        { replace: true }\n      ).then(value => {\n        return value;\n      }).catch(reason => {\n        return Promise.reject(reason);\n      });\n    };\n\n    if (options.dirname) {\n      return this.createCacheDirectory(options.dirname).then(() => {\n        return write(options);\n      }).catch(reason => {\n        return Promise.reject(reason);\n      });\n    }\n\n    return write(options);\n  }\n\n  private readFile<T>(options: LoadOptions): Promise<T> {\n    return this.file.readAsText(this.getFilepath(options.dirname), options.filename).then(value => {\n      return this.deserialize(<string>value);\n    }).catch(reason => {\n      return Promise.reject(reason);\n    });\n  }\n\n  private removeFile(options: RemoveOptions): Promise<any> {\n    return this.file.removeFile(this.getFilepath(options.dirname), options.filename).then(value => {\n      return value;\n    }).catch(reason => {\n      return Promise.reject(reason);\n    });\n  }\n\n  private getMetadata(fileEntry: Entry): Promise<Metadata> {\n    return new Promise<Metadata>((resolve) => {\n      fileEntry.getMetadata(metadata => {\n        resolve(metadata);\n      }, (error) => resolve());\n    });\n  }\n\n  private createCacheDirectory(dirname: string): Promise<any> {\n    return this.file.checkDir(this.getRootpath(), dirname).catch(() => {\n      return this.file.createDir(this.getRootpath(), dirname, false);\n    });\n  }\n\n  private getRootpath(): string {\n    return this.file.dataDirectory;\n  }\n\n  private getFilepath(dirname?: string): string {\n    if (!dirname) {\n      return this.getRootpath();\n    }\n\n    return this.getRootpath() + dirname;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Platform, },\n{type: File, },\n{type: MemoryStorage, },\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}