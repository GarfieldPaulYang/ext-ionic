{"version":3,"sources":["util.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,MAAM,yBAAyB,GAAQ;IACrC,EAAE,CAAC,CAAC,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC5B,GAAG,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;QAC/B,MAAM,CAAC,CAAC,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,EAAE,CAAC,CAAC;IACxD,CAAC;IACD,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;AACf,CAAC;AAAA,CAAC;AAEF,MAAM,oBAAoB,GAAQ;IAChC,MAAM,CAAC,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,CAAC;AAC3C,CAAC;AAED,MAAM,wBAAwB,GAAQ;IACpC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,UAAU,MAAM,EAAE,KAAK,EAAE,GAAG;QAClD,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3C,IAAI,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,UAAU,MAAM,EAAE,IAAI;gBAClE,MAAM,CAAI,GAAG,SAAI,IAAM,CAAC;YAC1B,CAAC,CAAC,CAAC;YACH,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QAC5B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACtB,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC;AAED,MAAM,0BAA0B,MAAW;IACzC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,UAAC,MAAM,EAAE,KAAK,EAAE,GAAG,IAAO,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC7F,CAAC","file":"util.js","sourceRoot":"","sourcesContent":["import * as _ from 'lodash';\n\nexport function isTrueProperty(val: any): boolean {\n  if (typeof val === 'string') {\n    val = val.toLowerCase().trim();\n    return (val === 'true' || val === 'on' || val === '');\n  }\n  return !!val;\n};\n\nexport function isPresent(val: any): boolean {\n  return val !== undefined && val !== null;\n}\n\nexport function flattenObject(obj: any) {\n  return _.transform(obj, function (result, value, key) {\n    if (_.isObject(value) && !_.isArray(value)) {\n      let flatMap = _.mapKeys(flattenObject(value), function (mvalue, mkey) {\n        return `${key}.${mkey}`;\n      });\n      _.assign(result, flatMap);\n    } else {\n      result[key] = value;\n    }\n\n    return result;\n  }, {});\n}\n\nexport function unFlattenObject(params: any) {\n  return _.reduce(params, (result, value, key) => { return _.set(result, key, value); }, {});\n}"]}